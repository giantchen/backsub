// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Diagnostics;
using System.Text;
using System.Collections.Generic;

using Master;

namespace TestOkApi
{
  /// <summary>
  ///This is a test class for Master.OkApi and is intended
  ///to contain all Master.OkApi Unit Tests
  ///</summary>
  [TestClass()]
  public class OkApiTest
  {


    private TestContext testContextInstance;

    /// <summary>
    ///Gets or sets the test context which provides
    ///information about and functionality for the current test run.
    ///</summary>
    public TestContext TestContext
    {
      get
      {
        return testContextInstance;
      }
      set
      {
        testContextInstance = value;
      }
    }
    #region Additional test attributes
    // 
    //You can use the following additional attributes as you write your tests:
    //
    //Use ClassInitialize to run code before running the first test in the class
    //
    //[ClassInitialize()]
    //public static void MyClassInitialize(TestContext testContext)
    //{
    //}
    //
    //Use ClassCleanup to run code after all tests in a class have run
    //
    //[ClassCleanup()]
    //public static void MyClassCleanup()
    //{
    //}
    //
    //Use TestInitialize to run code before running each test
    //
    //[TestInitialize()]
    //public void MyTestInitialize()
    //{
    //}
    //
    //Use TestCleanup to run code after each test has run
    //
    //[TestCleanup()]
    //public void MyTestCleanup()
    //{
    //}
    //
    #endregion


    /// <summary>
    ///A test for OpenBoard (ref int)
    ///</summary>
    [TestMethod()]
    public void BoardTest()
    {
      int index = -1; // TODO: Initialize to an appropriate value
      int index_expected = 0; // TODO: Initialize to an appropriate value

      IntPtr not_expected = new IntPtr();
      IntPtr hBoard = OkApi.OpenBoard(ref index);

      Assert.AreEqual(index_expected, index, "index_OpenBoard_expected was not set correctly.");
      Assert.AreNotEqual(not_expected, hBoard, "Master.OkApi.OpenBoard did not return the expected value.");

      StringBuilder boardName = new StringBuilder(256);
      short type = OkApi.GetTypeCode(hBoard, boardName);
      Debug.WriteLine(String.Format("{0} {1}", type, boardName));

      int result = OkApi.CloseBoard(hBoard);
      Assert.AreEqual(1, result);
    }

  }


}
